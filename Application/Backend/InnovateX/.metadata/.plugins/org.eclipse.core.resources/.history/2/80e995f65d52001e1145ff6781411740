package com.inovatex.user.dao;


import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

import com.inovatex.user.beans.PlanRequest;
import com.inovatex.user.beans.User;
import com.inovatex.user.exceptions.PlanRequestNotFoundExceptions;
import com.inovatex.user.exceptions.UserAlreadyExistsException;
import com.inovatex.user.exceptions.UserNotFoundExceptions;
import com.inovatex.utils.DBConnections;

public class UserDaoImpl implements UserDao {
	Connection conn;
	PreparedStatement preparedStatement;
	ResultSet resultSet;
	@Override
	public int addUser(User user) throws UserAlreadyExistsException {
		conn = DBConnections.getConnection();
		int rows=0;
		String insertsql = "INSERT INTO user (userfullName, username, userpassword, userdateOfJoining, userdateOfBirth, userdepartment, usermobile, useremail, userlocation, quotationSelectedId) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
		try {
			preparedStatement = conn.prepareStatement(insertsql);
			preparedStatement.setString(1, user.getUserFullName());
            preparedStatement.setString(2, user.getUsername());
            preparedStatement.setString(3, user.getUserPassword()); 
            preparedStatement.setString(4, user.getUserDateOfJoining().toString()); 
            preparedStatement.setString(5, user.getUserDateOfBirth().toString()); 
            preparedStatement.setString(6, user.getUserDepartment());
            preparedStatement.setString(7, user.getUserMobile());
            preparedStatement.setString(8, user.getUserEmail());
            preparedStatement.setString(9, user.getUserLocation());
            preparedStatement.setInt(10, 0);
			rows = preparedStatement.executeUpdate();
		} catch (SQLIntegrityConstraintViolationException e) {

            throw new UserAlreadyExistsException();
            
        } catch (SQLException e) {
        	e.printStackTrace();
        }
		DBConnections.close();
		return rows;
	}

	
	@Override
	public int deleteUser(String username) throws UserNotFoundExceptions {
		int rows=0;
		conn = DBConnections.getConnection();
		String deleteQuery="delete from  user where username=?";
		try {
			preparedStatement=conn.prepareStatement(deleteQuery);
			
			preparedStatement.setString(1, username);
			rows=preparedStatement.executeUpdate();
			return rows;
		} catch (SQLException e) {
			
			e.printStackTrace();
		}
		DBConnections.close();
		throw new UserNotFoundExceptions();
		
		
	}

	@Override
	public User getUserByUsername(String username) throws UserNotFoundExceptions {
		conn = DBConnections.getConnection();
		String selectquery="select * from user where username=?";
		try {
			preparedStatement=conn.prepareStatement(selectquery);
			preparedStatement.setString(1, username);
			resultSet=preparedStatement.executeQuery();
			if(resultSet.next())
			{
				User user = new User();
				 user.setUserId(resultSet.getInt("userId"));
                 user.setUserFullName(resultSet.getString("userfullName"));
                 user.setUsername(resultSet.getString("username"));
                 user.setUserPassword(resultSet.getString("userpassword"));
                 LocalDate doj = LocalDate.parse(resultSet.getDate("userdateOfJoining").toString(),DateTimeFormatter.ISO_DATE);
                 user.setUserDateOfJoining(doj);
                 LocalDate dob = LocalDate.parse(resultSet.getDate("userdateOfBirth").toString(),DateTimeFormatter.ISO_DATE);
                 user.setUserDateOfBirth(dob);
                 user.setUserDepartment(resultSet.getString("userdepartment"));
                 user.setUserMobile(resultSet.getString("usermobile"));
                 user.setUserEmail(resultSet.getString("useremail"));
                 user.setUserLocation(resultSet.getString("userlocation"));
                 user.setUserStatus(resultSet.getString("userstatus"));
                 user.setQuotationSelectedId(resultSet.getInt("quotationSelectedId"));
				
				return user;
				
			}
			 
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		DBConnections.close();
		throw new UserNotFoundExceptions();
		
	}

	@Override
	public List<User> allUser() throws UserNotFoundExceptions{
		String selectquery="select * from user";
		List<User> userList = new ArrayList<>();
		conn=DBConnections.getConnection();
		try {
			preparedStatement=conn.prepareStatement(selectquery);
			resultSet=preparedStatement.executeQuery();
			while(resultSet.next())
			{			
				User user = new User();
				 user.setUserId(resultSet.getInt("userId"));
                user.setUserFullName(resultSet.getString("userfullName"));
                user.setUsername(resultSet.getString("username"));
                user.setUserPassword(resultSet.getString("userpassword"));
                LocalDate doj = LocalDate.parse(resultSet.getDate("userdateOfJoining").toString(),DateTimeFormatter.ISO_DATE);
                user.setUserDateOfJoining(doj);
                LocalDate dob = LocalDate.parse(resultSet.getDate("userdateOfBirth").toString(),DateTimeFormatter.ISO_DATE);
                user.setUserDateOfBirth(dob);
                user.setUserDepartment(resultSet.getString("userdepartment"));
                user.setUserMobile(resultSet.getString("usermobile"));
                user.setUserEmail(resultSet.getString("useremail"));
                user.setUserLocation(resultSet.getString("userlocation"));
                user.setUserStatus(resultSet.getString("userstatus"));
                user.setQuotationSelectedId(resultSet.getInt("quotationSelectedId"));
                userList.add(user);
			}
			return userList;
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		DBConnections.close();
		throw new UserNotFoundExceptions();
	}

	@Override
	public int changePassword(String username, String password) throws UserNotFoundExceptions {
		int rows=0;
		 conn = DBConnections.getConnection();
		 String updateSql = "UPDATE user SET userpassword=? WHERE username=?";
		 try {
				preparedStatement = conn.prepareStatement(updateSql);
				preparedStatement.setString(1, password);
	            preparedStatement.setString(2, username);
				rows = preparedStatement.executeUpdate();
				if (rows==0) {
					throw new UserNotFoundExceptions();
				}
		 }catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		 DBConnections.close();
		 return rows;
		 
	}
	@Override
	public int changeStatus(String username, String status) throws UserNotFoundExceptions {
		int rows=0;
		 conn = DBConnections.getConnection();
		 String updateSql = "UPDATE user SET userstatus=? WHERE username=?";
		 try {
				preparedStatement = conn.prepareStatement(updateSql);
				preparedStatement.setString(1, status);
	            preparedStatement.setString(2, username);
				rows = preparedStatement.executeUpdate();
				if (rows==0) {
					throw new UserNotFoundExceptions();
				}
		 }catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		 DBConnections.close();
		 return rows;
		 
	}

	@Override
	public String getUserStatus(String username) throws UserNotFoundExceptions {
		String selectquery="select UserStatus from user where username=?";
		conn=DBConnections.getConnection();
		String userStatus;
		try {
			preparedStatement=conn.prepareStatement(selectquery);
			preparedStatement.setString(1, username);
			resultSet=preparedStatement.executeQuery();
			if(resultSet.next()) {
				userStatus=resultSet.getString("UserStatus");
				return userStatus`;
			}
		} catch (SQLException e) {
			
			e.printStackTrace();
		}
		throw new UserNotFoundExceptions();
		
	}

	@Override
	public int getUserIdByUsername(String username) throws UserNotFoundExceptions {
		String selectquery="select userid from user where username=?";
		conn=DBConnections.getConnection();
		int userId;
		try {
			preparedStatement=conn.prepareStatement(selectquery);
			preparedStatement.setString(1, username);
			resultSet=preparedStatement.executeQuery();
			if(resultSet.next()) {
				userId=resultSet.getInt("userId");
				return userId;
			}
		} catch (SQLException e) {
			
			e.printStackTrace();
		}
		throw new UserNotFoundExceptions();
		
	}
	@Override
	public int addPlanRequest(PlanRequest planRequest, int userId) {
		conn = DBConnections.getConnection();
		int rows=0;String insertsql = "INSERT INTO planrequest ( RequestFromDate, RequestToDate, RequestServices, RequestNumberOfPersons, UserID, requestOtherService) VALUES (?, ?, ?, ?, ?, ?)";
		try {
			preparedStatement = conn.prepareStatement(insertsql);
			preparedStatement.setString(1, planRequest.getRequestFromDate().toString());
            preparedStatement.setString(2, planRequest.getRequestToDate().toString());
            preparedStatement.setString(3, planRequest.getRequestServicesNeeded()); 
            preparedStatement.setInt(4, planRequest.getRequestNumberOfPersons()); 
            preparedStatement.setInt(5, userId); 
            preparedStatement.setString(6, planRequest.getRequestOtherServices());
            
			rows = preparedStatement.executeUpdate();
		} catch (SQLException e) {
        	e.printStackTrace();
        }
		DBConnections.close();
		return rows;
	}

	@Override
	public int deletePlanRequest(int  requestId) throws PlanRequestNotFoundExceptions {
		int rows=0;
		conn = DBConnections.getConnection();
		String deleteQuery="delete from  planrequest where requestId=?";
		try {
			preparedStatement=conn.prepareStatement(deleteQuery);
			
			preparedStatement.setInt(1, requestId);
			rows=preparedStatement.executeUpdate();
			return rows;
		} catch (SQLException e) {
			
			e.printStackTrace();
		}
		DBConnections.close();
		throw new PlanRequestNotFoundExceptions();
	}

	@Override
	public List<PlanRequest> allRequest() throws PlanRequestNotFoundExceptions {
		String selectquery="select * from planrequest";
		List<PlanRequest> planRequestList = new ArrayList<>();
		conn=DBConnections.getConnection();
		try {
			preparedStatement=conn.prepareStatement(selectquery);
			resultSet=preparedStatement.executeQuery();
			while(resultSet.next())
			{			
				
				PlanRequest planRequest= new PlanRequest();
				planRequest.setRequestId(resultSet.getInt("RequestID"));
				planRequest.setRequestServicesNeeded(resultSet.getString("RequestServices"));
                LocalDate fromDate = LocalDate.parse(resultSet.getDate("RequestFromDate").toString(),DateTimeFormatter.ISO_DATE);
                planRequest.setRequestFromDate(fromDate);
                LocalDate toDate = LocalDate.parse(resultSet.getDate("RequestToDate").toString(),DateTimeFormatter.ISO_DATE);
                planRequest.setRequestToDate(toDate);
                planRequest.setRequestNumberOfPersons(resultSet.getInt("RequestNumberOfPersons"));
                planRequest.setUserId(resultSet.getInt("UserID"));
                planRequestList.add(planRequest);
			}
			return planRequestList;
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		DBConnections.close();
		throw new PlanRequestNotFoundExceptions();
	}



}
