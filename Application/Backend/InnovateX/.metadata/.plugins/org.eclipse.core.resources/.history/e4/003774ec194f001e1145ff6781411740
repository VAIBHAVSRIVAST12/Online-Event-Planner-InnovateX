package com.inovatex.user.dao;


import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;


import com.inovatex.user.beans.User;
import com.inovatex.user.exceptions.UserAlreadyExistsException;
import com.inovatex.user.exceptions.UserNotFoundExceptions;
import com.inovatex.user.utils.DBConnections;

public class UserDaoImpl implements UserDao {
	Connection conn;
	PreparedStatement preparedStatement;
	ResultSet resultSet;
	@Override
	public int addUser(User user) throws UserAlreadyExistsException {
		conn = DBConnections.getConnection();
		int rows=0;
		String insertsql = "INSERT INTO user (userfullName, username, userpassword, userdateOfJoining, userdateOfBirth, userdepartment, usermobile, useremail, userlocation, quotationSelectedId) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
		try {
			preparedStatement = conn.prepareStatement(insertsql);
			preparedStatement.setString(1, user.getUserFullName());
            preparedStatement.setString(2, user.getUsername());
            preparedStatement.setString(3, user.getUserPassword()); 
            preparedStatement.setString(4, user.getUserDateOfJoining().toString()); 
            preparedStatement.setString(5, user.getUserDateOfBirth().toString()); 
            preparedStatement.setString(6, user.getUserDepartment());
            preparedStatement.setString(7, user.getUserMobile());
            preparedStatement.setString(8, user.getUserEmail());
            preparedStatement.setString(9, user.getUserLocation());
            preparedStatement.setInt(10, 0);
			rows = preparedStatement.executeUpdate();
		} catch (SQLIntegrityConstraintViolationException e) {

            throw new UserAlreadyExistsException();
            
        } catch (SQLException e) {
        	e.printStackTrace();
        }
		DBConnections.close();
		return rows;
	}

	@Override
	public int updateUser(User user) throws UserNotFoundExceptions {
		
		return 0;
	}

	@Override
	public int deleteUser(String username) throws UserNotFoundExceptions {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public User getUserByUsername(String username) throws UserNotFoundExceptions {
		conn = DBConnections.getConnection();
		String selectquery="select * from user where username=?";
		try {
			preparedStatement=conn.prepareStatement(selectquery);
			preparedStatement.setString(1, username);
			resultSet=preparedStatement.executeQuery();
			if(resultSet.next())
			{
				User user = new User();
				 user.setUserId(resultSet.getInt("userId"));
                 user.setUserFullName(resultSet.getString("fullName"));
                 user.setUsername(resultSet.getString("username"));
                 user.setUserPassword(resultSet.getString("password"));
                 LocalDate doj = LocalDate.parse(resultSet.getDate("dateOfJoining").toString(),DateTimeFormatter.ISO_DATE);
                 user.setUserDateOfJoining(doj);
                 LocalDate dob = LocalDate.parse(resultSet.getDate("dateOfBirth").toString(),DateTimeFormatter.ISO_DATE);
                 user.setUserDateOfBirth(dob);
                 user.setUserDepartment(resultSet.getString("department"));
                 user.setUserMobile(resultSet.getString("mobile"));
                 user.setUserEmail(resultSet.getString("email"));
                 user.setUserLocation(resultSet.getString("location"));
                 user.setUserStatus(resultSet.getString("status"));
                 user.setQuotationSelectedId(resultSet.getInt("quotationSelectedId"));
				
				return user;
				
			}
			 
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		DBConnections.close();
		throw new UserNotFoundExceptions();
		
	}

	@Override
	public List<User> allUser() {
		// TODO Auto-generated method stub
		return null;
	}

}
